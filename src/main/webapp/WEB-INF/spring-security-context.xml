<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
 	                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <!-- Static resources such as CSS and JS files are ignored by Spring Security -->
 	<http pattern="/static/**" security="none"/>
<!--  	<http pattern="/login" security="none"/> -->
 	
    <!-- @author : dinhpv  @description : Add script handler for ajax session expiration @date : 2017-04-07 -->
    <beans:bean id="ajaxTimeoutRedirectFilter" class="vn.com.unit.jcanary.security.AjaxTimeoutRedirectFilter">
        <beans:property name="customSessionExpiredErrorCode" value="901"/>
    </beans:bean>
    <!--  End dinhpv -->
    
 	<beans:bean id="loginSuccessHandler" class="vn.com.unit.jcanary.security.LoginSuccessHandler">
<!--  	    <beans:property name="useReferer" value="true"/> -->
 	</beans:bean>
    <beans:bean id="loginFailureHandler" class="vn.com.unit.jcanary.security.LoginFailureHandler" />
    <beans:bean id="cusAccessDeniedHandler" class="vn.com.unit.jcanary.security.AccessDeniedHandler" />
    
    <beans:bean id="authenticationEntryPoint"  class="vn.com.unit.jcanary.security.AjaxAwareAuthenticationEntryPoint">
	    <beans:constructor-arg name="loginUrl" value="/login"/>
	</beans:bean>
    
	<http auto-config="true" use-expressions="true" pattern="/**" entry-point-ref="authenticationEntryPoint" disable-url-rewriting="true">
	<custom-filter ref="ajaxTimeoutRedirectFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
		<form-login login-page="/login"
		    login-processing-url="/j_spring_security_check"
		    default-target-url="/"
		    authentication-failure-url="/login?error=true"
		    authentication-success-handler-ref="loginSuccessHandler"
			authentication-failure-handler-ref="loginFailureHandler" 
			username-parameter="username"
            password-parameter="password"/>
            
        <!-- Configures the logout function -->
        <logout logout-url="/j_spring_security_logout" invalidate-session="true" logout-success-url="/login" />
            
		<!-- Anyone can access these urls -->	
        <intercept-url pattern="/login" access="permitAll" />
        
        <!-- The rest of our application is protected. -->
        <intercept-url pattern="/**" access="hasRole('ROLE_AUTHED')" />

        <intercept-url pattern="/accessDenied" access="hasRole('ROLE_GUEST') or isAuthenticated()" />
		<access-denied-handler ref="cusAccessDeniedHandler"/>	
		
        <!-- Enables Spring Security CSRF protection -->
        <csrf disabled="false"/>
        
        <headers>
        	<cache-control />
        	<content-type-options />
        	<hsts include-subdomains="true" max-age-seconds="31536000" />
            <frame-options policy="SAMEORIGIN"/>          
            <xss-protection block="true"/>
        </headers>
        <!-- check concurency session -->
         <session-management invalid-session-url="/login?error=true" session-fixation-protection="migrateSession">
	       <concurrency-control error-if-maximum-exceeded="false" expired-url="/login?message=max_session" max-sessions="10" />
	    </session-management>
     	
	</http>
	
 	<beans:bean id="customAuthenticationProvider" class="vn.com.unit.jcanary.authentication.CustomAuthenticationProvider" />
	
	<authentication-manager>
		<authentication-provider ref="customAuthenticationProvider" /> 
	</authentication-manager>
</beans:beans>